import requests
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np

def get_categories():
    '''
    Gets categories used in the Albert Heijn website
    '''
    products_url = 'https://www.ah.nl/producten'
    req = requests.get(products_url)
    soup = BeautifulSoup(req.text,features="html.parser")

    category_tags = soup.find_all('a',class_="taxonomy-card_imageLink__13VS1")

    category_names = [category['title'] for category in category_tags]
    category_links = ['http://www.ah.nl' + category['href'] for category in category_tags]

    return [{'name':i[0], 'link':i[1]} for i in zip(category_names,category_links)]


def get_products_from_pageset(url_base, label=''):

    # inits
    search_price = 0
    products_dict_list = []

    # check if query
    if not '?' in url_base:
        url_base = url_base + '?'
    else:
        url_base = url_base + '&'

    # loop
    for i in range(30):

        # make new query with new starting price and page number
        url = (url_base +
               'sortBy=price' +
               '&minPrice=' + str(search_price) +
               '&maxPrice=120&page=' + str(55+i))

        print('Searching through ' + url + ' ...')

        # get products from a single page and append to existing list
        products_on_page = get_products_from_page(url, label)
        products_dict_list = products_dict_list + products_on_page

        # get the price of the most expensive item to know where to start the next loop. Note: this might produce duplicate entries
        search_price = np.nanmax([product['price'] for product in products_dict_list])

        # if the number of items was less than 1000, this was the last page. Note: If the number of items is exactly 1000, this will cause issues
        if len(products_on_page) < 1000:
            break

    return products_dict_list


def get_products_from_page(url, label=''):
    '''
    Gets all products from a single page with multiple items.
    Keyword arguments:
    url: the url of the page
    label: a label can be added to all items in the returnlist. If blank or not specified, the dicts will not contain this key
    Returns: list of dicts of products
    '''

    # init
    products_dict_list = []

    # open connection to webpage
    req = requests.get(url)
    soup = BeautifulSoup(req.text,features="html.parser")
    product_tags = soup.find_all(attrs = {'data-testhook':'product-card'})
    print(str(len(product_tags)) + ' items found')

    for product_tag in product_tags:

        product_dict = dict()

        # Product name
        try:
            product_dict['name'] = str(product_tag.find_all(class_="lazy-image_image__2025k")[0]["title"])
        except:
            product_dict['name'] = ''

        # URL
        try:
            product_dict['link'] = str('https://www.ah.nl' + product_tag.find_all('a', class_="link_root__fmxIo")[0]['href'])
        except:
            product_dict['link'] = ''

        # Quantity (e.g. 100g)
        try:
            product_dict['quantity'] = str(product_tag.find(attrs={'data-testhook':"product-unit-size"}).contents[0])
        except:
            product_dict['quantity'] = ''

        # Promo
        try:
            product_dict['promotion'] = str(''.join([promo.contents[0] + '. ' for promo in  product_tag.find_all(attrs={'data-testhook':"product-shield"})[0].find_all('span')])[:-2])
        except:
            product_dict['promotion'] = ''

        # Price and discounted price
        price_tags = product_tag.find_all(attrs = {'data-testhook':"price-amount"})
        if len(price_tags) !=0:
            product_dict['price'] = float(price_tags[0].contents[0].contents[0] + price_tags[0].contents[1].contents[0] + price_tags[0].contents[2].contents[0])
            if len(price_tags) == 2:
                product_dict['price_discounted'] = float(price_tags[1].contents[0].contents[0] + price_tags[1].contents[1].contents[0] + price_tags[1].contents[2].contents[0])
            else:
                product_dict['price_discounted'] = np.nan
        else:
            product_dict['price'] = np.nan
            product_dict['price_discounted'] = np.nan

        # Product category
        if label != '':
            product_dict['label'] = label


        products_dict_list.append(product_dict)
    return products_dict_list


def get_products_from_categories(categories):
    products_dict_list = []
    for category in categories:
        print(category['link'] + '?', category['name'])
        products_dict_list = products_dict_list + get_products_from_pageset(category['link'] + '?', category['name'])
    return products_dict_list


def product_dict_to_df(products_dict_list):
    #products_dict_list = [val for sublist in products_dict_list for val in sublist]
    products_df = pd.DataFrame(products_dict_list).drop_duplicates().reset_index(drop = True)
    products_df['discount_percentage'] = (products_df['price'] - products_df['price_discounted'])/products_df['price']*100
    products_df['discount'] = (products_df['price'] - products_df['price_discounted'])
    return products_df


def get_all_products():
    cat = get_categories()
    products = get_products_from_categories(cat)
    product_df = product_dict_to_df(products)
    return product_df


def search_product(searchstr):
    url = 'https://www.ah.nl/zoeken?query=' + searchstr.replace(' ','%20')
    return product_dict_to_df(get_products_from_pageset(url))


def save_products_to_html(products_df):
    products_df['link'] = products_df['link'].apply(lambda x: '<a href="{0}">link</a>'.format(x))
    f = open('AH_prod.html','w')
    f.write(products_df.to_html(escape=False))
    f.close()


def get_product_info(url):
    req = requests.get(url)
    soup = BeautifulSoup(req.text,features="html.parser")

    # name
    name = soup.find_all(class_="product-card-header_root__1GTl1")[0].find('h1').find('span').contents[0]

    # unit_price
    if len(soup.find_all(class_="product-card-header_unitPriceWithPadding__MonzR")) == 0:
        unit_price = ''
    else:
        unit_price = ''.join(soup.find_all(class_="product-card-header_unitPriceWithPadding__MonzR")[0].contents)

    # unit
    unit = soup.find_all(class_="product-card-header_unitInfo__2ncbP")[0].contents[0]

    # price
    is_promo_tag = soup.find_all(class_="price-amount_root__vE9dJ price-amount_was__1MqPG product-card-hero-price_was__1ZNtq")
    if len(is_promo_tag) == 0:
        promo = False
        pricetag_orig = soup.find_all(class_="price-amount_root__vE9dJ product-card-hero-price_now__PlF9u")[0]
        price_orig = float(''.join([s.contents[0] for s in pricetag_orig.find_all('span')]))
        price_promo = np.nan
    else:
        promo = True
        pricetag_promo = soup.find_all(class_="price-amount_root__vE9dJ price-amount_bonus__xJzk1 product-card-hero-price_now__PlF9u")[0]
        pricetag_orig = soup.find_all(class_="price-amount_root__vE9dJ price-amount_was__1MqPG product-card-hero-price_was__1ZNtq")[0]
        price_orig = float(''.join([s.contents[0] for s in pricetag_orig.find_all('span')]))
        price_promo = float(''.join([s.contents[0] for s in pricetag_promo.find_all('span')]))

    # summary
    summary_tag = soup.find_all(class_="product-summary")
    summary = summary_tag[0].find('p').contents[0]
    summary_detail = [s.contents[0] for s in summary_tag[0].find_all('li')]

    # ingredients
    ingredients_block = soup.find_all(class_="product-info-content-block product-info-ingredients")
    if len(ingredients_block) != 0:
        ingredients = soup.find_all(class_="product-info-content-block product-info-ingredients")[0].find('p').contents[0]
    else:
        ingredients = ''

    # nutritional info
    nutri_tag = soup.find(class_="product-info-nutritions__table")
    if nutri_tag != None:
        nutri_unit = nutri_tag.find_all('th')[1].contents[0]
        keys = [nt.find_all()[0].contents[0] for nt in nutri_tag.find_all('tr')]
        values = [nt.find_all()[1].contents[0] for nt in nutri_tag.find_all('tr')]
        nutritional_info = dict(zip(keys, values))
    else:
        nutritional_info = ''

    return {'name':name,
            'unit_price': unit_price,
            'unit': unit,
            'is_promo': promo,
            'price_original': price_orig,
            'price_promo': price_promo,
            'summary': summary,
            'summary_detail': summary_detail,
            'ingredients': ingredients,
            'nutritional_info': nutritional_info,
            'link': url}

if __name__=='__main__':
    df = product_dict_to_df(get_products_from_categories([get_categories()[0]]))
    print(df)
